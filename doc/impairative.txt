==============================================================================
Impairative - Pairs of complementing keybinds                      *impairative*

ImpairativeSetupArgs                                      *ImpairativeSetupArgs*

    Fields: ~
        {enable?}                (string)                             Leader keys for turning settings on in `toggling` keymaps
        {disable?}               (string)                             Leader keys for turning settings off in `toggling` keymaps
        {toggle?}                (string)                             Leader keys for toggling settings in `toggling` keymaps
        {toggling?}              (fun(helper:ImpairativeToggling))    Define mappings with the supplied |ImpairativeToggling|
        {backward?}              (string)                             Leader keys for turning the operation backward in `operations` keymaps
        {forward?}               (string)                             Leader keys for running the operation forward in `operations` keymaps
        {operations?}            (fun(helper:ImpairativeOperations))  Define mappings with the supplied |ImpairativeOperations|
        {replicate_unimpaired?}  (boolean)                            Create (almost) the same mappings vim-unimpaired creates


M.setup({args})                                              *impairative.setup*
    Configure keymaps

    Completly optional - the helper objects can be created and used directly.

    Parameters: ~
        {args}  (ImpairativeSetupArgs)


M.toggling({opts})                                        *impairative.toggling*
    Create an |ImpairativeToggling| helper to define mappings with

    Parameters: ~
        {opts}  (ImpairativeTogglingOptions)

    Returns: ~
        (ImpairativeToggling)


M.operations({opts})                                    *impairative.operations*
    Create an |ImpairativeOperations| helper to define mappings with

    Parameters: ~
        {opts}  (ImpairativeOperationsOptions)

    Returns: ~
        (ImpairativeOperations)


ImpairativeTogglingOptions                          *ImpairativeTogglingOptions*

    Fields: ~
        {enable}   (string)  Leader keys for turning settings on
        {disable}  (string)  Leader keys for turning settings off
        {toggle}   (string)  Leader keys for toggling settings


ImpairativeToggling                                        *ImpairativeToggling*

    Fields: ~
        {_opts}  (ImpairativeTogglingOptions)


ImpairativeTogglingManualArgs                    *ImpairativeTogglingManualArgs*

    Fields: ~
        {key}      (string)        The key for the mapping (will be prefixed by one of the leaders)
        {name?}    (string)        A name for generating mapping descriptions
        {enable}   (string|fun())  Command or function for the enable mapping
        {disable}  (string|fun())  Command or function for the disable mapping
        {toggle}   (string|fun())  Command or function for the toggle mapping


ImpairativeToggling:manual({args})                  *ImpairativeToggling:manual*
    Bind toggling mappings by directly specifying the commands for each mapping.

    Parameters: ~
        {args}  (ImpairativeTogglingManualArgs)


ImpairativeTogglingGetterSetterArgs        *ImpairativeTogglingGetterSetterArgs*

    Fields: ~
        {key}    (string)              The key for the mapping (will be prefixed by one of the leaders)
        {name?}  (string)              A name for generating mapping descriptions
        {get}    (fun():boolean)       Checks if the toggleable thing is on or off
        {set}    (fun(value:boolean))  Sets the value of the toggleable thing


                                             *ImpairativeToggling:getter_setter*
ImpairativeToggling:getter_setter({args})
    Bind toggling mappings by directly specifying a getter and a setter.

    Parameters: ~
        {args}  (ImpairativeTogglingGetterSetterArgs)

    Returns: ~
        (ImpairativeToggling)


ImpairativeTogglingFieldArgs                      *ImpairativeTogglingFieldArgs*

    Fields: ~
        {key}      (string)         The key for the mapping (will be prefixed by one of the leaders)
        {name?}    (string)         A name for generating mapping descriptions
        {table}    (table)          The Lua table that contains the field to toggle
        {field}    (any)            The name of the field in the Lua table
        {values?}  ({boolean:any})  Use when the field is not not using boolean (e.g. `{[true] = 'on', [false] = 'off'}`)


ImpairativeToggling:field({args})                    *ImpairativeToggling:field*
    Bind toggling mappings for a field in a Lua table.

    Can also be used for things that use metatables like |lua-vim-variables|,
    but if that table is |vim.o| prefer using |ImpairativeToggling:option|
    instead.

    Parameters: ~
        {args}  (ImpairativeTogglingFieldArgs)

    Returns: ~
        (ImpairativeToggling)


ImpairativeTogglingOptionArgs                    *ImpairativeTogglingOptionArgs*

    Fields: ~
        {key}      (string)         The key for the mapping (will be prefixed by one of the leaders)
        {option}   (string)         The name of the Neovim option
        {values?}  ({boolean:any})  Use when the field is not not using boolean (e.g. `{[true] = 'on', [false] = 'off'}`)


ImpairativeToggling:option({args})                  *ImpairativeToggling:option*
    Bind toggling mappings for a Neovim option using |vim.o|.

    Parameters: ~
        {args}  (ImpairativeTogglingOptionArgs)

    Returns: ~
        (ImpairativeToggling)


ImpairativeOperationsOptions                      *ImpairativeOperationsOptions*

    Fields: ~
        {backward}  (string)  Leader keys for turning the operation backward
        {forward}   (string)  Leader keys for running the operation forward


ImpairativeOperations                                    *ImpairativeOperations*

    Fields: ~
        {_opts}  (ImpairativeOperationsOptions)


ImpairativeOperationsFunctionPairArgs    *ImpairativeOperationsFunctionPairArgs*

    Fields: ~
        {key}       (string)
        {desc?}     (string|{backward:string,forward:string})
        {backward}  (fun())
        {forward}   (fun())


                                           *ImpairativeOperations:function_pair*
ImpairativeOperations:function_pair({args})

    Parameters: ~
        {args}  (ImpairativeOperationsFunctionPairArgs)

    Returns: ~
        (ImpairativeOperations)


ImpairativeOperationsUnifiedFunctionArgs*ImpairativeOperationsUnifiedFunctionArgs*

    Fields: ~
        {key}    (string)
        {desc?}  (string|{backward:string,forward:string})
        {fun}    (fun(direction:"backward"|"forward"))


                                        *ImpairativeOperations:unified_function*
ImpairativeOperations:unified_function({args})

    Parameters: ~
        {args}  (ImpairativeOperationsUnifiedFunctionArgs)

    Returns: ~
        (ImpairativeOperations)


ImpairativeOperationsJumpInBufArgs          *ImpairativeOperationsJumpInBufArgs*

    Fields: ~
        {key}       (string)
        {desc?}     (string|{backward:string,forward:string})
        {extreme?}  ({key:string,desc?:string|{backward:string,forward:string}})
        {fun}       (fun():Iter)


                                             *ImpairativeOperations:jump_in_buf*
ImpairativeOperations:jump_in_buf({args})

    Parameters: ~
        {args}  (ImpairativeOperationsJumpInBufArgs)

    Returns: ~
        (ImpairativeOperations)


ImpairativeOperationsCommandPairArgs      *ImpairativeOperationsCommandPairArgs*

    Fields: ~
        {key}       (string)
        {backward}  (string)
        {forward}   (string)


                                            *ImpairativeOperations:command_pair*
ImpairativeOperations:command_pair({args})

    Parameters: ~
        {args}  (ImpairativeOperationsCommandPairArgs)

    Returns: ~
        (ImpairativeOperations)


ImpairativeRangeOp                                          *ImpairativeRangeOp*

    Fields: ~
        {direction}   ("backward"|"forward")
        {count}       (integer)
        {count1}      (integer)
        {range_type}  (string)
        {start_line}  (integer)
        {end_line}    (integer)
        {start_col}   (integer)
        {end_col}     (integer)


                                     *ImpairativeOperationRangeManipulationArgs*
ImpairativeOperationRangeManipulationArgs

    Fields: ~
        {key}        (string)
        {line_key?}  (string|boolean)
        {desc?}      (string|{backward:string,forward:string})
        {fun}        (fun(args:ImpairativeRangeOp))


                                      *ImpairativeOperations:range_manipulation*
ImpairativeOperations:range_manipulation({args})

    Parameters: ~
        {args}  (ImpairativeOperationRangeManipulationArgs)


                                     *ImpairativeOperationsTextManipulationArgs*
ImpairativeOperationsTextManipulationArgs

    Fields: ~
        {key}        (string)
        {line_key?}  (string|boolean)
        {desc?}      (string|{backward:string,forward:string})
        {backward}   (fun(orig:string):string)
        {forward}    (fun(orig:string):string)


                                       *ImpairativeOperations:text_manipulation*
ImpairativeOperations:text_manipulation({args})

    Parameters: ~
        {args}  (ImpairativeOperationsTextManipulationArgs)

    Returns: ~
        (ImpairativeOperations)


vim:tw=78:ts=8:noet:ft=help:norl:
